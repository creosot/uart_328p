
uart_328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000033a  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b32  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d02  00000000  00000000  0000201a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000115f  00000000  00000000  00002d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000230  00000000  00000000  00003e7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ffa3  00000000  00000000  000040ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f1f  00000000  00000000  0001404f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00014f6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003dd3  00000000  00000000  0001500e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	61 c0       	rjmp	.+194    	; 0xc8 <__bad_interrupt>
   6:	00 00       	nop
   8:	5f c0       	rjmp	.+190    	; 0xc8 <__bad_interrupt>
   a:	00 00       	nop
   c:	5d c0       	rjmp	.+186    	; 0xc8 <__bad_interrupt>
   e:	00 00       	nop
  10:	5b c0       	rjmp	.+182    	; 0xc8 <__bad_interrupt>
  12:	00 00       	nop
  14:	59 c0       	rjmp	.+178    	; 0xc8 <__bad_interrupt>
  16:	00 00       	nop
  18:	57 c0       	rjmp	.+174    	; 0xc8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	55 c0       	rjmp	.+170    	; 0xc8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	53 c0       	rjmp	.+166    	; 0xc8 <__bad_interrupt>
  22:	00 00       	nop
  24:	51 c0       	rjmp	.+162    	; 0xc8 <__bad_interrupt>
  26:	00 00       	nop
  28:	4f c0       	rjmp	.+158    	; 0xc8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4d c0       	rjmp	.+154    	; 0xc8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4b c0       	rjmp	.+150    	; 0xc8 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__bad_interrupt>
  36:	00 00       	nop
  38:	47 c0       	rjmp	.+142    	; 0xc8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	45 c0       	rjmp	.+138    	; 0xc8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__bad_interrupt>
  42:	00 00       	nop
  44:	41 c0       	rjmp	.+130    	; 0xc8 <__bad_interrupt>
  46:	00 00       	nop
  48:	3f c0       	rjmp	.+126    	; 0xc8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3d c0       	rjmp	.+122    	; 0xc8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3b c0       	rjmp	.+118    	; 0xc8 <__bad_interrupt>
  52:	00 00       	nop
  54:	39 c0       	rjmp	.+114    	; 0xc8 <__bad_interrupt>
  56:	00 00       	nop
  58:	37 c0       	rjmp	.+110    	; 0xc8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	35 c0       	rjmp	.+106    	; 0xc8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	33 c0       	rjmp	.+102    	; 0xc8 <__bad_interrupt>
  62:	00 00       	nop
  64:	31 c0       	rjmp	.+98     	; 0xc8 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
  68:	73 74       	andi	r23, 0x43	; 67
  6a:	72 69       	ori	r23, 0x92	; 146
  6c:	6e 67       	ori	r22, 0x7E	; 126
  6e:	20 66       	ori	r18, 0x60	; 96
  70:	72 6f       	ori	r23, 0xF2	; 242
  72:	6d 20       	and	r6, r13
  74:	50 4d       	sbci	r21, 0xD0	; 208
	...

00000077 <baudctrl_16mhz>:
  77:	40 03 a0 01 cf 00 67 00 33 00 19 00 10 00           @.....g.3.....

00000085 <baudctrl_8mhz>:
  85:	a0 01 cf 00 67 00 33 00 19 00 0c 00 07 00           ....g.3.......

00000093 <baudctrl_1mhz>:
  93:	33 00 19 00 0c 00 06 00 03 00 02 00 01 00 00        3..............

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d8 e0       	ldi	r29, 0x08	; 8
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	11 e0       	ldi	r17, 0x01	; 1
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	ea e3       	ldi	r30, 0x3A	; 58
  b6:	f3 e0       	ldi	r31, 0x03	; 3
  b8:	02 c0       	rjmp	.+4      	; 0xbe <__do_copy_data+0x10>
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 31       	cpi	r26, 0x12	; 18
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0xc>
  c4:	02 d0       	rcall	.+4      	; 0xca <main>
  c6:	37 c1       	rjmp	.+622    	; 0x336 <_exit>

000000c8 <__bad_interrupt>:
  c8:	9b cf       	rjmp	.-202    	; 0x0 <__vectors>

000000ca <main>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
  ca:	25 9a       	sbi	0x04, 5	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
  cc:	2d 98       	cbi	0x05, 5	; 5
int main(void)
{
	ioport_init();
	ioport_set_pin_dir(MY_LED, IOPORT_DIR_OUTPUT);
	ioport_set_pin_low(MY_LED);
	usart0_init_9600_8_1_n_16Mh(&USART0, &USART_OPTIONS, 16000000UL);
  ce:	20 e0       	ldi	r18, 0x00	; 0
  d0:	34 e2       	ldi	r19, 0x24	; 36
  d2:	44 ef       	ldi	r20, 0xF4	; 244
  d4:	50 e0       	ldi	r21, 0x00	; 0
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	71 e0       	ldi	r23, 0x01	; 1
  da:	80 ec       	ldi	r24, 0xC0	; 192
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	ae d0       	rcall	.+348    	; 0x23c <usart0_init_9600_8_1_n_16Mh>
  e0:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	8b e7       	ldi	r24, 0x7B	; 123
  e6:	92 e9       	ldi	r25, 0x92	; 146
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x1e>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x28>
  f2:	00 00       	nop
	
    while (1) 
    {
		ioport_set_pin_low(MY_LED);
		_delay_ms(3000);
		putcharFromPMtoUSART0andCR(str1);
  f4:	88 e6       	ldi	r24, 0x68	; 104
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	f2 d0       	rcall	.+484    	; 0x2de <putcharFromPMtoUSART0andCR>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
  fa:	2d 9a       	sbi	0x05, 5	; 5
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	8b e7       	ldi	r24, 0x7B	; 123
 100:	92 e9       	ldi	r25, 0x92	; 146
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x38>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x42>
 10c:	00 00       	nop
		ioport_set_pin_high(MY_LED);
		_delay_ms(3000);
		putcharFromSTRtoUSART0andCR(str2);
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 116:	fa d0       	rcall	.+500    	; 0x30c <putcharFromSTRtoUSART0andCR>
    }
 118:	e3 cf       	rjmp	.-58     	; 0xe0 <main+0x16>

0000011a <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	1f 92       	push	r1
 120:	cd b7       	in	r28, 0x3d	; 61
 122:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 124:	9f b7       	in	r25, 0x3f	; 63
 126:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 128:	f8 94       	cli
	return flags;
 12a:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
 12c:	81 11       	cpse	r24, r1
 12e:	06 c0       	rjmp	.+12     	; 0x13c <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
 130:	e4 e6       	ldi	r30, 0x64	; 100
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	60 95       	com	r22
 136:	80 81       	ld	r24, Z
 138:	68 23       	and	r22, r24
 13a:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 13c:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
 13e:	0f 90       	pop	r0
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <usart_putchar>:
	
	usart_spi_set_baudrate(usart, opt->baudrate,
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
 146:	fc 01       	movw	r30, r24
 148:	90 81       	ld	r25, Z
 14a:	95 ff       	sbrs	r25, 5
 14c:	fd cf       	rjmp	.-6      	; 0x148 <usart_putchar+0x2>
 14e:	66 83       	std	Z+6, r22	; 0x06
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret

00000154 <usart_set_baudrate_precalculated>:
 154:	0f 93       	push	r16
 156:	1f 93       	push	r17
 158:	40 38       	cpi	r20, 0x80	; 128
 15a:	e5 e2       	ldi	r30, 0x25	; 37
 15c:	5e 07       	cpc	r21, r30
 15e:	61 05       	cpc	r22, r1
 160:	71 05       	cpc	r23, r1
 162:	49 f1       	breq	.+82     	; 0x1b6 <usart_set_baudrate_precalculated+0x62>
 164:	90 f4       	brcc	.+36     	; 0x18a <usart_set_baudrate_precalculated+0x36>
 166:	40 36       	cpi	r20, 0x60	; 96
 168:	e9 e0       	ldi	r30, 0x09	; 9
 16a:	5e 07       	cpc	r21, r30
 16c:	61 05       	cpc	r22, r1
 16e:	71 05       	cpc	r23, r1
 170:	f1 f0       	breq	.+60     	; 0x1ae <usart_set_baudrate_precalculated+0x5a>
 172:	40 3c       	cpi	r20, 0xC0	; 192
 174:	f2 e1       	ldi	r31, 0x12	; 18
 176:	5f 07       	cpc	r21, r31
 178:	61 05       	cpc	r22, r1
 17a:	71 05       	cpc	r23, r1
 17c:	d1 f0       	breq	.+52     	; 0x1b2 <usart_set_baudrate_precalculated+0x5e>
 17e:	40 3b       	cpi	r20, 0xB0	; 176
 180:	54 40       	sbci	r21, 0x04	; 4
 182:	61 05       	cpc	r22, r1
 184:	71 05       	cpc	r23, r1
 186:	f9 f4       	brne	.+62     	; 0x1c6 <usart_set_baudrate_precalculated+0x72>
 188:	20 c0       	rjmp	.+64     	; 0x1ca <usart_set_baudrate_precalculated+0x76>
 18a:	41 15       	cp	r20, r1
 18c:	f6 e9       	ldi	r31, 0x96	; 150
 18e:	5f 07       	cpc	r21, r31
 190:	61 05       	cpc	r22, r1
 192:	71 05       	cpc	r23, r1
 194:	a1 f0       	breq	.+40     	; 0x1be <usart_set_baudrate_precalculated+0x6a>
 196:	41 15       	cp	r20, r1
 198:	e1 ee       	ldi	r30, 0xE1	; 225
 19a:	5e 07       	cpc	r21, r30
 19c:	61 05       	cpc	r22, r1
 19e:	71 05       	cpc	r23, r1
 1a0:	81 f0       	breq	.+32     	; 0x1c2 <usart_set_baudrate_precalculated+0x6e>
 1a2:	41 15       	cp	r20, r1
 1a4:	5b 44       	sbci	r21, 0x4B	; 75
 1a6:	61 05       	cpc	r22, r1
 1a8:	71 05       	cpc	r23, r1
 1aa:	69 f4       	brne	.+26     	; 0x1c6 <usart_set_baudrate_precalculated+0x72>
 1ac:	06 c0       	rjmp	.+12     	; 0x1ba <usart_set_baudrate_precalculated+0x66>
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	0d c0       	rjmp	.+26     	; 0x1cc <usart_set_baudrate_precalculated+0x78>
 1b2:	42 e0       	ldi	r20, 0x02	; 2
 1b4:	0b c0       	rjmp	.+22     	; 0x1cc <usart_set_baudrate_precalculated+0x78>
 1b6:	43 e0       	ldi	r20, 0x03	; 3
 1b8:	09 c0       	rjmp	.+18     	; 0x1cc <usart_set_baudrate_precalculated+0x78>
 1ba:	44 e0       	ldi	r20, 0x04	; 4
 1bc:	07 c0       	rjmp	.+14     	; 0x1cc <usart_set_baudrate_precalculated+0x78>
 1be:	45 e0       	ldi	r20, 0x05	; 5
 1c0:	05 c0       	rjmp	.+10     	; 0x1cc <usart_set_baudrate_precalculated+0x78>
 1c2:	46 e0       	ldi	r20, 0x06	; 6
 1c4:	03 c0       	rjmp	.+6      	; 0x1cc <usart_set_baudrate_precalculated+0x78>
 1c6:	4f ef       	ldi	r20, 0xFF	; 255
 1c8:	01 c0       	rjmp	.+2      	; 0x1cc <usart_set_baudrate_precalculated+0x78>
 1ca:	40 e0       	ldi	r20, 0x00	; 0
 1cc:	00 34       	cpi	r16, 0x40	; 64
 1ce:	52 e4       	ldi	r21, 0x42	; 66
 1d0:	15 07       	cpc	r17, r21
 1d2:	5f e0       	ldi	r21, 0x0F	; 15
 1d4:	25 07       	cpc	r18, r21
 1d6:	31 05       	cpc	r19, r1
 1d8:	49 f4       	brne	.+18     	; 0x1ec <usart_set_baudrate_precalculated+0x98>
 1da:	e4 2f       	mov	r30, r20
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	ed 56       	subi	r30, 0x6D	; 109
 1e4:	ff 4f       	sbci	r31, 0xFF	; 255
 1e6:	25 91       	lpm	r18, Z+
 1e8:	34 91       	lpm	r19, Z
 1ea:	20 c0       	rjmp	.+64     	; 0x22c <usart_set_baudrate_precalculated+0xd8>
 1ec:	01 15       	cp	r16, r1
 1ee:	e2 e1       	ldi	r30, 0x12	; 18
 1f0:	1e 07       	cpc	r17, r30
 1f2:	ea e7       	ldi	r30, 0x7A	; 122
 1f4:	2e 07       	cpc	r18, r30
 1f6:	31 05       	cpc	r19, r1
 1f8:	49 f4       	brne	.+18     	; 0x20c <usart_set_baudrate_precalculated+0xb8>
 1fa:	e4 2f       	mov	r30, r20
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	ee 0f       	add	r30, r30
 200:	ff 1f       	adc	r31, r31
 202:	eb 57       	subi	r30, 0x7B	; 123
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	25 91       	lpm	r18, Z+
 208:	34 91       	lpm	r19, Z
 20a:	10 c0       	rjmp	.+32     	; 0x22c <usart_set_baudrate_precalculated+0xd8>
 20c:	01 15       	cp	r16, r1
 20e:	14 42       	sbci	r17, 0x24	; 36
 210:	24 4f       	sbci	r18, 0xF4	; 244
 212:	31 05       	cpc	r19, r1
 214:	49 f4       	brne	.+18     	; 0x228 <usart_set_baudrate_precalculated+0xd4>
 216:	e4 2f       	mov	r30, r20
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	e9 58       	subi	r30, 0x89	; 137
 220:	ff 4f       	sbci	r31, 0xFF	; 255
 222:	25 91       	lpm	r18, Z+
 224:	34 91       	lpm	r19, Z
 226:	02 c0       	rjmp	.+4      	; 0x22c <usart_set_baudrate_precalculated+0xd8>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	4f 3f       	cpi	r20, 0xFF	; 255
 22e:	19 f0       	breq	.+6      	; 0x236 <usart_set_baudrate_precalculated+0xe2>
 230:	fc 01       	movw	r30, r24
 232:	35 83       	std	Z+5, r19	; 0x05
 234:	24 83       	std	Z+4, r18	; 0x04
 236:	1f 91       	pop	r17
 238:	0f 91       	pop	r16
 23a:	08 95       	ret

0000023c <usart0_init_9600_8_1_n_16Mh>:
	
	usart->UBRR  = ubrr;
}

//igor
void usart0_init_9600_8_1_n_16Mh(USART_t *usart, const usart_rs232_options_t *opt, uint32_t cpu_hz){
 23c:	8f 92       	push	r8
 23e:	9f 92       	push	r9
 240:	af 92       	push	r10
 242:	bf 92       	push	r11
 244:	ef 92       	push	r14
 246:	ff 92       	push	r15
 248:	0f 93       	push	r16
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	ec 01       	movw	r28, r24
 252:	7b 01       	movw	r14, r22
 254:	49 01       	movw	r8, r18
 256:	5a 01       	movw	r10, r20
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
 258:	80 3c       	cpi	r24, 0xC0	; 192
 25a:	91 05       	cpc	r25, r1
 25c:	19 f4       	brne	.+6      	; 0x264 <usart0_init_9600_8_1_n_16Mh+0x28>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm); //0x01
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	5b df       	rcall	.-330    	; 0x11a <sysclk_enable_module>
}

//igor
void usart0_init_9600_8_1_n_16Mh(USART_t *usart, const usart_rs232_options_t *opt, uint32_t cpu_hz){
	usart_enable_module_clock(usart);
	usart_format_set(usart, opt->charlength, opt->paritytype, opt->stopbits);
 264:	f7 01       	movw	r30, r14
 266:	26 81       	ldd	r18, Z+6	; 0x06
 268:	35 81       	ldd	r19, Z+5	; 0x05
 26a:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_CHSIZE01C_gm)) | ((charSize & 0x03) << USART_CHSIZE01C_gp); //ucsr0c&1111 1001|0000 0110
 26c:	9a 81       	ldd	r25, Y+2	; 0x02
 26e:	48 2f       	mov	r20, r24
 270:	43 70       	andi	r20, 0x03	; 3
 272:	44 0f       	add	r20, r20
 274:	99 7f       	andi	r25, 0xF9	; 249
 276:	94 2b       	or	r25, r20
 278:	9a 83       	std	Y+2, r25	; 0x02
		
	(usart)->UCSRnB = ((usart)->UCSRnB & (~USART_CHSIZE2_bm)) | ((charSize & 0x04) << USART_CHSIZE2_bp); //ucsr0b&1111 1011
 27a:	99 81       	ldd	r25, Y+1	; 0x01
 27c:	84 70       	andi	r24, 0x04	; 4
 27e:	88 0f       	add	r24, r24
 280:	88 0f       	add	r24, r24
 282:	9b 7f       	andi	r25, 0xFB	; 251
 284:	89 2b       	or	r24, r25
 286:	89 83       	std	Y+1, r24	; 0x01

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode; //ucsr0c&1100 1111 
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	8f 7c       	andi	r24, 0xCF	; 207
 28c:	83 2b       	or	r24, r19
 28e:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits << USART_STOPB_bp); //ucsr0c&1111 0111 -1-stop bit
 290:	8a 81       	ldd	r24, Y+2	; 0x02
 292:	92 2f       	mov	r25, r18
 294:	99 0f       	add	r25, r25
 296:	99 0f       	add	r25, r25
 298:	99 0f       	add	r25, r25
 29a:	87 7f       	andi	r24, 0xF7	; 247
 29c:	89 2b       	or	r24, r25
 29e:	8a 83       	std	Y+2, r24	; 0x02
 *
 * \param usart The USART module.
 */
static inline void usart_double_baud_disable(USART_t *usart)
{
	usart->UCSRnA &= ~USART_U2X_bm;
 2a0:	e0 ec       	ldi	r30, 0xC0	; 192
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	8d 7f       	andi	r24, 0xFD	; 253
 2a8:	80 83       	st	Z, r24
	usart_double_baud_disable(&USART0);
	usart_set_baudrate_precalculated(usart, opt->baudrate, cpu_hz);
 2aa:	f7 01       	movw	r30, r14
 2ac:	40 81       	ld	r20, Z
 2ae:	51 81       	ldd	r21, Z+1	; 0x01
 2b0:	62 81       	ldd	r22, Z+2	; 0x02
 2b2:	73 81       	ldd	r23, Z+3	; 0x03
 2b4:	95 01       	movw	r18, r10
 2b6:	84 01       	movw	r16, r8
 2b8:	ce 01       	movw	r24, r28
 2ba:	4c df       	rcall	.-360    	; 0x154 <usart_set_baudrate_precalculated>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
 2bc:	89 81       	ldd	r24, Y+1	; 0x01
 2be:	88 60       	ori	r24, 0x08	; 8
 2c0:	89 83       	std	Y+1, r24	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
 2c2:	89 81       	ldd	r24, Y+1	; 0x01
 2c4:	80 61       	ori	r24, 0x10	; 16
 2c6:	89 83       	std	Y+1, r24	; 0x01
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
 2c8:	df 91       	pop	r29
 2ca:	cf 91       	pop	r28
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	ff 90       	pop	r15
 2d2:	ef 90       	pop	r14
 2d4:	bf 90       	pop	r11
 2d6:	af 90       	pop	r10
 2d8:	9f 90       	pop	r9
 2da:	8f 90       	pop	r8
 2dc:	08 95       	ret

000002de <putcharFromPMtoUSART0andCR>:

void putcharFromPMtoUSART0andCR(const char pmData[]) {
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
	unsigned char c = 0;
	while ( 0 != ( c = pgm_read_byte(pmData++))) {
 2e2:	ec 01       	movw	r28, r24
 2e4:	21 96       	adiw	r28, 0x01	; 1
 2e6:	fc 01       	movw	r30, r24
 2e8:	64 91       	lpm	r22, Z
 2ea:	66 23       	and	r22, r22
 2ec:	41 f0       	breq	.+16     	; 0x2fe <putcharFromPMtoUSART0andCR+0x20>
		usart_putchar(&USART0, c);
 2ee:	80 ec       	ldi	r24, 0xC0	; 192
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	29 df       	rcall	.-430    	; 0x146 <usart_putchar>
	usart_rx_enable(usart);
}

void putcharFromPMtoUSART0andCR(const char pmData[]) {
	unsigned char c = 0;
	while ( 0 != ( c = pgm_read_byte(pmData++))) {
 2f4:	fe 01       	movw	r30, r28
 2f6:	64 91       	lpm	r22, Z
 2f8:	21 96       	adiw	r28, 0x01	; 1
 2fa:	61 11       	cpse	r22, r1
 2fc:	f8 cf       	rjmp	.-16     	; 0x2ee <putcharFromPMtoUSART0andCR+0x10>
		usart_putchar(&USART0, c);
	}
	usart_putchar(&USART0, 0x0D);
 2fe:	6d e0       	ldi	r22, 0x0D	; 13
 300:	80 ec       	ldi	r24, 0xC0	; 192
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	20 df       	rcall	.-448    	; 0x146 <usart_putchar>
}
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	08 95       	ret

0000030c <putcharFromSTRtoUSART0andCR>:

void putcharFromSTRtoUSART0andCR(const char *str) {
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
	while (*str) {
 310:	fc 01       	movw	r30, r24
 312:	60 81       	ld	r22, Z
 314:	66 23       	and	r22, r22
 316:	41 f0       	breq	.+16     	; 0x328 <putcharFromSTRtoUSART0andCR+0x1c>
 318:	ec 01       	movw	r28, r24
 31a:	21 96       	adiw	r28, 0x01	; 1
		usart_putchar(&USART0, *str++);
 31c:	80 ec       	ldi	r24, 0xC0	; 192
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	12 df       	rcall	.-476    	; 0x146 <usart_putchar>
	}
	usart_putchar(&USART0, 0x0D);
}

void putcharFromSTRtoUSART0andCR(const char *str) {
	while (*str) {
 322:	69 91       	ld	r22, Y+
 324:	61 11       	cpse	r22, r1
 326:	fa cf       	rjmp	.-12     	; 0x31c <putcharFromSTRtoUSART0andCR+0x10>
		usart_putchar(&USART0, *str++);
	}
	usart_putchar(&USART0, 0x0D);
 328:	6d e0       	ldi	r22, 0x0D	; 13
 32a:	80 ec       	ldi	r24, 0xC0	; 192
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0b df       	rcall	.-490    	; 0x146 <usart_putchar>
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
