
uart_328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002c6  0000033a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000342  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000374  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018b3  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ca1  00000000  00000000  00001d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000010d3  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b4  00000000  00000000  00003a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ff58  00000000  00000000  00003c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bba  00000000  00000000  00013b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00014742  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003dcd  00000000  00000000  000147ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ec       	ldi	r30, 0xC6	; 198
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	02 d0       	rcall	.+4      	; 0x90 <main>
  8c:	1a c1       	rjmp	.+564    	; 0x2c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <main>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
  90:	25 9a       	sbi	0x04, 5	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
  92:	2d 98       	cbi	0x05, 5	; 5
int main(void)
{
	ioport_init();
	ioport_set_pin_dir(MY_LED, IOPORT_DIR_OUTPUT);
	ioport_set_pin_low(MY_LED);
	usart_init_rs232(&USART0, &USART_OPTIONS);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	71 e0       	ldi	r23, 0x01	; 1
  98:	80 ec       	ldi	r24, 0xC0	; 192
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	ae d0       	rcall	.+348    	; 0x1fa <usart_init_rs232>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	33 ed       	ldi	r19, 0xD3	; 211
  a2:	80 e3       	ldi	r24, 0x30	; 48
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x14>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x1e>
  ae:	00 00       	nop
 * \param usart The USART module.
 * \param txdata The data to be transmitted.
 */
static inline void usart_put(USART_t *usart, uint8_t txdata)
{
	(usart)->UDR = txdata;
  b0:	e0 ec       	ldi	r30, 0xC0	; 192
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	2d 98       	cbi	0x05, 5	; 5
  b8:	9f ef       	ldi	r25, 0xFF	; 255
  ba:	23 ed       	ldi	r18, 0xD3	; 211
  bc:	30 e3       	ldi	r19, 0x30	; 48
  be:	91 50       	subi	r25, 0x01	; 1
  c0:	20 40       	sbci	r18, 0x00	; 0
  c2:	30 40       	sbci	r19, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <main+0x2e>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x38>
  c8:	00 00       	nop
  ca:	86 83       	std	Z+6, r24	; 0x06
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
  cc:	2d 9a       	sbi	0x05, 5	; 5
  ce:	9f ef       	ldi	r25, 0xFF	; 255
  d0:	23 ed       	ldi	r18, 0xD3	; 211
  d2:	30 e3       	ldi	r19, 0x30	; 48
  d4:	91 50       	subi	r25, 0x01	; 1
  d6:	20 40       	sbci	r18, 0x00	; 0
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x44>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x4e>
  de:	00 00       	nop
  e0:	ea cf       	rjmp	.-44     	; 0xb6 <main+0x26>

000000e2 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	1f 92       	push	r1
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
  ec:	9f b7       	in	r25, 0x3f	; 63
  ee:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
  f0:	f8 94       	cli
	return flags;
  f2:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
  f4:	81 11       	cpse	r24, r1
  f6:	06 c0       	rjmp	.+12     	; 0x104 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
  f8:	e4 e6       	ldi	r30, 0x64	; 100
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	60 95       	com	r22
  fe:	80 81       	ld	r24, Z
 100:	68 23       	and	r22, r24
 102:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 104:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
 106:	0f 90       	pop	r0
 108:	df 91       	pop	r29
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
 10e:	8f 92       	push	r8
 110:	9f 92       	push	r9
 112:	af 92       	push	r10
 114:	bf 92       	push	r11
 116:	cf 92       	push	r12
 118:	df 92       	push	r13
 11a:	ef 92       	push	r14
 11c:	ff 92       	push	r15
 11e:	0f 93       	push	r16
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ec 01       	movw	r28, r24
 128:	6a 01       	movw	r12, r20
 12a:	7b 01       	movw	r14, r22

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
 12c:	b9 01       	movw	r22, r18
 12e:	a8 01       	movw	r20, r16
 130:	68 94       	set
 132:	12 f8       	bld	r1, 2
 134:	76 95       	lsr	r23
 136:	67 95       	ror	r22
 138:	57 95       	ror	r21
 13a:	47 95       	ror	r20
 13c:	16 94       	lsr	r1
 13e:	d1 f7       	brne	.-12     	; 0x134 <usart_set_baudrate+0x26>
	/* 524288 =  8 * (65535 + 1)  =  8 *(UBRRn_max+1) */
	min_rate = cpu_hz / 524288;
 140:	d9 01       	movw	r26, r18
 142:	c8 01       	movw	r24, r16
 144:	07 2e       	mov	r0, r23
 146:	73 e1       	ldi	r23, 0x13	; 19
 148:	b6 95       	lsr	r27
 14a:	a7 95       	ror	r26
 14c:	97 95       	ror	r25
 14e:	87 95       	ror	r24
 150:	7a 95       	dec	r23
 152:	d1 f7       	brne	.-12     	; 0x148 <usart_set_baudrate+0x3a>
 154:	70 2d       	mov	r23, r0

	if (usart->UCSRnA & USART_U2X_bm) {
 156:	e8 81       	ld	r30, Y
 158:	e1 ff       	sbrs	r30, 1
 15a:	0b c0       	rjmp	.+22     	; 0x172 <usart_set_baudrate+0x64>
		max_rate /= 2;
 15c:	4a 01       	movw	r8, r20
 15e:	5b 01       	movw	r10, r22
 160:	b6 94       	lsr	r11
 162:	a7 94       	ror	r10
 164:	97 94       	ror	r9
 166:	87 94       	ror	r8
		min_rate /= 2;
 168:	b6 95       	lsr	r27
 16a:	a7 95       	ror	r26
 16c:	97 95       	ror	r25
 16e:	87 95       	ror	r24
 170:	02 c0       	rjmp	.+4      	; 0x176 <usart_set_baudrate+0x68>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 =  8 * (0 + 1) = (UBRRn_min + 1) */
	max_rate = cpu_hz / 8;
 172:	4a 01       	movw	r8, r20
 174:	5b 01       	movw	r10, r22
	if (usart->UCSRnA & USART_U2X_bm) {
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
 176:	8c 14       	cp	r8, r12
 178:	9d 04       	cpc	r9, r13
 17a:	ae 04       	cpc	r10, r14
 17c:	bf 04       	cpc	r11, r15
 17e:	68 f1       	brcs	.+90     	; 0x1da <usart_set_baudrate+0xcc>
 180:	c8 16       	cp	r12, r24
 182:	d9 06       	cpc	r13, r25
 184:	ea 06       	cpc	r14, r26
 186:	fb 06       	cpc	r15, r27
 188:	50 f1       	brcs	.+84     	; 0x1de <usart_set_baudrate+0xd0>
		return false;
	}

	/* Check if double speed is enabled. */
	if (usart->UCSRnA & USART_U2X_bm) {
 18a:	88 81       	ld	r24, Y
 18c:	81 ff       	sbrs	r24, 1
 18e:	0f c0       	rjmp	.+30     	; 0x1ae <usart_set_baudrate+0xa0>
		baud *= 2;
 190:	cc 0c       	add	r12, r12
 192:	dd 1c       	adc	r13, r13
 194:	ee 1c       	adc	r14, r14
 196:	ff 1c       	adc	r15, r15
		ubrr = (uint32_t)(cpu_hz / 8 / baud) - 1;
 198:	cb 01       	movw	r24, r22
 19a:	ba 01       	movw	r22, r20
 19c:	a7 01       	movw	r20, r14
 19e:	96 01       	movw	r18, r12
 1a0:	6e d0       	rcall	.+220    	; 0x27e <__udivmodsi4>
 1a2:	da 01       	movw	r26, r20
 1a4:	c9 01       	movw	r24, r18
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	a1 09       	sbc	r26, r1
 1aa:	b1 09       	sbc	r27, r1
 1ac:	12 c0       	rjmp	.+36     	; 0x1d2 <usart_set_baudrate+0xc4>
	} else {
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
 1ae:	c9 01       	movw	r24, r18
 1b0:	b8 01       	movw	r22, r16
 1b2:	68 94       	set
 1b4:	13 f8       	bld	r1, 3
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	77 95       	ror	r23
 1bc:	67 95       	ror	r22
 1be:	16 94       	lsr	r1
 1c0:	d1 f7       	brne	.-12     	; 0x1b6 <usart_set_baudrate+0xa8>
 1c2:	a7 01       	movw	r20, r14
 1c4:	96 01       	movw	r18, r12
 1c6:	5b d0       	rcall	.+182    	; 0x27e <__udivmodsi4>
 1c8:	da 01       	movw	r26, r20
 1ca:	c9 01       	movw	r24, r18
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	a1 09       	sbc	r26, r1
 1d0:	b1 09       	sbc	r27, r1
	}

	usart->UBRR = ubrr;
 1d2:	9d 83       	std	Y+5, r25	; 0x05
 1d4:	8c 83       	std	Y+4, r24	; 0x04
	return true;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	03 c0       	rjmp	.+6      	; 0x1e0 <usart_set_baudrate+0xd2>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	01 c0       	rjmp	.+2      	; 0x1e0 <usart_set_baudrate+0xd2>
 1de:	80 e0       	ldi	r24, 0x00	; 0
		ubrr = (uint32_t)(cpu_hz / 16 / baud) - 1;
	}

	usart->UBRR = ubrr;
	return true;
}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	df 90       	pop	r13
 1ee:	cf 90       	pop	r12
 1f0:	bf 90       	pop	r11
 1f2:	af 90       	pop	r10
 1f4:	9f 90       	pop	r9
 1f6:	8f 90       	pop	r8
 1f8:	08 95       	ret

000001fa <usart_init_rs232>:
 *
 * \retval true if the initialization was successful
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ec 01       	movw	r28, r24
 204:	8b 01       	movw	r16, r22
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
 206:	80 3c       	cpi	r24, 0xC0	; 192
 208:	91 05       	cpc	r25, r1
 20a:	19 f4       	brne	.+6      	; 0x212 <usart_init_rs232+0x18>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	68 df       	rcall	.-304    	; 0xe2 <sysclk_enable_module>
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_UMSEL01_gm)) | usartmode;
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	8f 73       	andi	r24, 0x3F	; 63
 216:	8a 83       	std	Y+2, r24	; 0x02
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
	bool result;
	usart_enable_module_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
 218:	f8 01       	movw	r30, r16
 21a:	26 81       	ldd	r18, Z+6	; 0x06
 21c:	35 81       	ldd	r19, Z+5	; 0x05
 21e:	84 81       	ldd	r24, Z+4	; 0x04
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
 220:	9a 81       	ldd	r25, Y+2	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
 222:	48 2f       	mov	r20, r24
 224:	43 70       	andi	r20, 0x03	; 3
			<< USART_CHSIZE01C_gp);
 226:	44 0f       	add	r20, r20
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
 228:	99 7f       	andi	r25, 0xF9	; 249
 22a:	94 2b       	or	r25, r20
 22c:	9a 83       	std	Y+2, r25	; 0x02
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
 22e:	99 81       	ldd	r25, Y+1	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
 230:	84 70       	andi	r24, 0x04	; 4
			<< USART_CHSIZE2_bp);
 232:	88 0f       	add	r24, r24
 234:	88 0f       	add	r24, r24
	(usart)->UCSRnC
		= ((usart)->UCSRnC &
			(~USART_CHSIZE01C_gm)) | ((charSize & 0x03)
			<< USART_CHSIZE01C_gp);
	(usart)->UCSRnB
		= ((usart)->UCSRnB &
 236:	9b 7f       	andi	r25, 0xFB	; 251
 238:	89 2b       	or	r24, r25
 23a:	89 83       	std	Y+1, r24	; 0x01
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;
 23c:	8a 81       	ldd	r24, Y+2	; 0x02
 23e:	8f 7c       	andi	r24, 0xCF	; 207
 240:	83 2b       	or	r24, r19
 242:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
 244:	8a 81       	ldd	r24, Y+2	; 0x02
			<< USART_STOPB_bp);
 246:	92 2f       	mov	r25, r18
 248:	99 0f       	add	r25, r25
 24a:	99 0f       	add	r25, r25
 24c:	99 0f       	add	r25, r25
			(~USART_CHSIZE2_bm)) | ((charSize & 0x04)
			<< USART_CHSIZE2_bp);

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode;

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits
 24e:	87 7f       	andi	r24, 0xF7	; 247
 250:	89 2b       	or	r24, r25
 252:	8a 83       	std	Y+2, r24	; 0x02
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate,
 254:	40 81       	ld	r20, Z
 256:	51 81       	ldd	r21, Z+1	; 0x01
 258:	62 81       	ldd	r22, Z+2	; 0x02
 25a:	73 81       	ldd	r23, Z+3	; 0x03
 25c:	00 e4       	ldi	r16, 0x40	; 64
 25e:	12 e4       	ldi	r17, 0x42	; 66
 260:	2f e0       	ldi	r18, 0x0F	; 15
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	ce 01       	movw	r24, r28
 266:	53 df       	rcall	.-346    	; 0x10e <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
 268:	99 81       	ldd	r25, Y+1	; 0x01
 26a:	98 60       	ori	r25, 0x08	; 8
 26c:	99 83       	std	Y+1, r25	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
 26e:	99 81       	ldd	r25, Y+1	; 0x01
 270:	90 61       	ori	r25, 0x10	; 16
 272:	99 83       	std	Y+1, r25	; 0x01
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	return result;
}
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	08 95       	ret

0000027e <__udivmodsi4>:
 27e:	a1 e2       	ldi	r26, 0x21	; 33
 280:	1a 2e       	mov	r1, r26
 282:	aa 1b       	sub	r26, r26
 284:	bb 1b       	sub	r27, r27
 286:	fd 01       	movw	r30, r26
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <__udivmodsi4_ep>

0000028a <__udivmodsi4_loop>:
 28a:	aa 1f       	adc	r26, r26
 28c:	bb 1f       	adc	r27, r27
 28e:	ee 1f       	adc	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	a2 17       	cp	r26, r18
 294:	b3 07       	cpc	r27, r19
 296:	e4 07       	cpc	r30, r20
 298:	f5 07       	cpc	r31, r21
 29a:	20 f0       	brcs	.+8      	; 0x2a4 <__udivmodsi4_ep>
 29c:	a2 1b       	sub	r26, r18
 29e:	b3 0b       	sbc	r27, r19
 2a0:	e4 0b       	sbc	r30, r20
 2a2:	f5 0b       	sbc	r31, r21

000002a4 <__udivmodsi4_ep>:
 2a4:	66 1f       	adc	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	99 1f       	adc	r25, r25
 2ac:	1a 94       	dec	r1
 2ae:	69 f7       	brne	.-38     	; 0x28a <__udivmodsi4_loop>
 2b0:	60 95       	com	r22
 2b2:	70 95       	com	r23
 2b4:	80 95       	com	r24
 2b6:	90 95       	com	r25
 2b8:	9b 01       	movw	r18, r22
 2ba:	ac 01       	movw	r20, r24
 2bc:	bd 01       	movw	r22, r26
 2be:	cf 01       	movw	r24, r30
 2c0:	08 95       	ret

000002c2 <_exit>:
 2c2:	f8 94       	cli

000002c4 <__stop_program>:
 2c4:	ff cf       	rjmp	.-2      	; 0x2c4 <__stop_program>
