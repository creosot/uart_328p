
uart_328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000002ca  0000033e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ca  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001acd  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ce6  00000000  00000000  00001f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001113  00000000  00000000  00002c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000214  00000000  00000000  00003d30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000ff5a  00000000  00000000  00003f44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ebb  00000000  00000000  00013e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00014d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003dd3  00000000  00000000  00014df1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	48 c0       	rjmp	.+144    	; 0x92 <__ctors_end>
   2:	00 00       	nop
   4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
   6:	00 00       	nop
   8:	57 c0       	rjmp	.+174    	; 0xb8 <__bad_interrupt>
   a:	00 00       	nop
   c:	55 c0       	rjmp	.+170    	; 0xb8 <__bad_interrupt>
   e:	00 00       	nop
  10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
  12:	00 00       	nop
  14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
  16:	00 00       	nop
  18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4d c0       	rjmp	.+154    	; 0xb8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
  22:	00 00       	nop
  24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
  26:	00 00       	nop
  28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	45 c0       	rjmp	.+138    	; 0xb8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
  32:	00 00       	nop
  34:	41 c0       	rjmp	.+130    	; 0xb8 <__bad_interrupt>
  36:	00 00       	nop
  38:	3f c0       	rjmp	.+126    	; 0xb8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3d c0       	rjmp	.+122    	; 0xb8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3b c0       	rjmp	.+118    	; 0xb8 <__bad_interrupt>
  42:	00 00       	nop
  44:	39 c0       	rjmp	.+114    	; 0xb8 <__bad_interrupt>
  46:	00 00       	nop
  48:	37 c0       	rjmp	.+110    	; 0xb8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	35 c0       	rjmp	.+106    	; 0xb8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	33 c0       	rjmp	.+102    	; 0xb8 <__bad_interrupt>
  52:	00 00       	nop
  54:	31 c0       	rjmp	.+98     	; 0xb8 <__bad_interrupt>
  56:	00 00       	nop
  58:	2f c0       	rjmp	.+94     	; 0xb8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2d c0       	rjmp	.+90     	; 0xb8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2b c0       	rjmp	.+86     	; 0xb8 <__bad_interrupt>
  62:	00 00       	nop
  64:	29 c0       	rjmp	.+82     	; 0xb8 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
  68:	40 03       	mulsu	r20, r16
  6a:	a0 01       	movw	r20, r0
  6c:	cf 00       	.word	0x00cf	; ????
  6e:	67 00       	.word	0x0067	; ????
  70:	33 00       	.word	0x0033	; ????
  72:	19 00       	.word	0x0019	; ????
  74:	10 00       	.word	0x0010	; ????

00000076 <baudctrl_8mhz>:
  76:	a0 01 cf 00 67 00 33 00 19 00 0c 00 07 00           ....g.3.......

00000084 <baudctrl_1mhz>:
  84:	33 00 19 00 0c 00 06 00 03 00 02 00 01 00           3.............

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d8 e0       	ldi	r29, 0x08	; 8
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	ea ec       	ldi	r30, 0xCA	; 202
  a6:	f2 e0       	ldi	r31, 0x02	; 2
  a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
  aa:	05 90       	lpm	r0, Z+
  ac:	0d 92       	st	X+, r0
  ae:	a8 30       	cpi	r26, 0x08	; 8
  b0:	b1 07       	cpc	r27, r17
  b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>
  b4:	02 d0       	rcall	.+4      	; 0xba <main>
  b6:	07 c1       	rjmp	.+526    	; 0x2c6 <_exit>

000000b8 <__bad_interrupt>:
  b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <main>:
		enum ioport_direction dir)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->DIR |= arch_ioport_pin_to_mask(pin);
  ba:	25 9a       	sbi	0x04, 5	; 4
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
  bc:	2d 98       	cbi	0x05, 5	; 5
int main(void)
{
	ioport_init();
	ioport_set_pin_dir(MY_LED, IOPORT_DIR_OUTPUT);
	ioport_set_pin_low(MY_LED);
	usart0_init_9600_8_1_n_16Mh(&USART0, &USART_OPTIONS, 16000000UL);
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	34 e2       	ldi	r19, 0x24	; 36
  c2:	44 ef       	ldi	r20, 0xF4	; 244
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	60 e0       	ldi	r22, 0x00	; 0
  c8:	71 e0       	ldi	r23, 0x01	; 1
  ca:	80 ec       	ldi	r24, 0xC0	; 192
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	aa d0       	rcall	.+340    	; 0x224 <usart0_init_9600_8_1_n_16Mh>
  d0:	2d 98       	cbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	8b e7       	ldi	r24, 0x7B	; 123
  d6:	92 e9       	ldi	r25, 0x92	; 146
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x1e>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x28>
  e2:	00 00       	nop
	
    while (1) 
    {
		ioport_set_pin_low(MY_LED);
		_delay_ms(3000);
		usart_putchar(&USART0, 'a');
  e4:	61 e6       	ldi	r22, 0x61	; 97
  e6:	80 ec       	ldi	r24, 0xC0	; 192
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	21 d0       	rcall	.+66     	; 0x12e <usart_putchar>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
  ec:	2d 9a       	sbi	0x05, 5	; 5
  ee:	2f ef       	ldi	r18, 0xFF	; 255
  f0:	8b e7       	ldi	r24, 0x7B	; 123
  f2:	92 e9       	ldi	r25, 0x92	; 146
  f4:	21 50       	subi	r18, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x3a>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x44>
  fe:	00 00       	nop
 100:	e7 cf       	rjmp	.-50     	; 0xd0 <main+0x16>

00000102 <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	1f 92       	push	r1
 108:	cd b7       	in	r28, 0x3d	; 61
 10a:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
 10c:	9f b7       	in	r25, 0x3f	; 63
 10e:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
 110:	f8 94       	cli
	return flags;
 112:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
 114:	81 11       	cpse	r24, r1
 116:	06 c0       	rjmp	.+12     	; 0x124 <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
 118:	e4 e6       	ldi	r30, 0x64	; 100
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	60 95       	com	r22
 11e:	80 81       	ld	r24, Z
 120:	68 23       	and	r22, r24
 122:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
 124:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
 126:	0f 90       	pop	r0
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <usart_putchar>:
	
	usart_spi_set_baudrate(usart, opt->baudrate,
			sysclk_get_source_clock_hz());
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
 12e:	fc 01       	movw	r30, r24
 130:	90 81       	ld	r25, Z
 132:	95 ff       	sbrs	r25, 5
 134:	fd cf       	rjmp	.-6      	; 0x130 <usart_putchar+0x2>
 136:	66 83       	std	Z+6, r22	; 0x06
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret

0000013c <usart_set_baudrate_precalculated>:
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	40 38       	cpi	r20, 0x80	; 128
 142:	e5 e2       	ldi	r30, 0x25	; 37
 144:	5e 07       	cpc	r21, r30
 146:	61 05       	cpc	r22, r1
 148:	71 05       	cpc	r23, r1
 14a:	49 f1       	breq	.+82     	; 0x19e <usart_set_baudrate_precalculated+0x62>
 14c:	90 f4       	brcc	.+36     	; 0x172 <usart_set_baudrate_precalculated+0x36>
 14e:	40 36       	cpi	r20, 0x60	; 96
 150:	e9 e0       	ldi	r30, 0x09	; 9
 152:	5e 07       	cpc	r21, r30
 154:	61 05       	cpc	r22, r1
 156:	71 05       	cpc	r23, r1
 158:	f1 f0       	breq	.+60     	; 0x196 <usart_set_baudrate_precalculated+0x5a>
 15a:	40 3c       	cpi	r20, 0xC0	; 192
 15c:	f2 e1       	ldi	r31, 0x12	; 18
 15e:	5f 07       	cpc	r21, r31
 160:	61 05       	cpc	r22, r1
 162:	71 05       	cpc	r23, r1
 164:	d1 f0       	breq	.+52     	; 0x19a <usart_set_baudrate_precalculated+0x5e>
 166:	40 3b       	cpi	r20, 0xB0	; 176
 168:	54 40       	sbci	r21, 0x04	; 4
 16a:	61 05       	cpc	r22, r1
 16c:	71 05       	cpc	r23, r1
 16e:	f9 f4       	brne	.+62     	; 0x1ae <usart_set_baudrate_precalculated+0x72>
 170:	20 c0       	rjmp	.+64     	; 0x1b2 <usart_set_baudrate_precalculated+0x76>
 172:	41 15       	cp	r20, r1
 174:	f6 e9       	ldi	r31, 0x96	; 150
 176:	5f 07       	cpc	r21, r31
 178:	61 05       	cpc	r22, r1
 17a:	71 05       	cpc	r23, r1
 17c:	a1 f0       	breq	.+40     	; 0x1a6 <usart_set_baudrate_precalculated+0x6a>
 17e:	41 15       	cp	r20, r1
 180:	e1 ee       	ldi	r30, 0xE1	; 225
 182:	5e 07       	cpc	r21, r30
 184:	61 05       	cpc	r22, r1
 186:	71 05       	cpc	r23, r1
 188:	81 f0       	breq	.+32     	; 0x1aa <usart_set_baudrate_precalculated+0x6e>
 18a:	41 15       	cp	r20, r1
 18c:	5b 44       	sbci	r21, 0x4B	; 75
 18e:	61 05       	cpc	r22, r1
 190:	71 05       	cpc	r23, r1
 192:	69 f4       	brne	.+26     	; 0x1ae <usart_set_baudrate_precalculated+0x72>
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <usart_set_baudrate_precalculated+0x66>
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	0d c0       	rjmp	.+26     	; 0x1b4 <usart_set_baudrate_precalculated+0x78>
 19a:	42 e0       	ldi	r20, 0x02	; 2
 19c:	0b c0       	rjmp	.+22     	; 0x1b4 <usart_set_baudrate_precalculated+0x78>
 19e:	43 e0       	ldi	r20, 0x03	; 3
 1a0:	09 c0       	rjmp	.+18     	; 0x1b4 <usart_set_baudrate_precalculated+0x78>
 1a2:	44 e0       	ldi	r20, 0x04	; 4
 1a4:	07 c0       	rjmp	.+14     	; 0x1b4 <usart_set_baudrate_precalculated+0x78>
 1a6:	45 e0       	ldi	r20, 0x05	; 5
 1a8:	05 c0       	rjmp	.+10     	; 0x1b4 <usart_set_baudrate_precalculated+0x78>
 1aa:	46 e0       	ldi	r20, 0x06	; 6
 1ac:	03 c0       	rjmp	.+6      	; 0x1b4 <usart_set_baudrate_precalculated+0x78>
 1ae:	4f ef       	ldi	r20, 0xFF	; 255
 1b0:	01 c0       	rjmp	.+2      	; 0x1b4 <usart_set_baudrate_precalculated+0x78>
 1b2:	40 e0       	ldi	r20, 0x00	; 0
 1b4:	00 34       	cpi	r16, 0x40	; 64
 1b6:	52 e4       	ldi	r21, 0x42	; 66
 1b8:	15 07       	cpc	r17, r21
 1ba:	5f e0       	ldi	r21, 0x0F	; 15
 1bc:	25 07       	cpc	r18, r21
 1be:	31 05       	cpc	r19, r1
 1c0:	49 f4       	brne	.+18     	; 0x1d4 <usart_set_baudrate_precalculated+0x98>
 1c2:	e4 2f       	mov	r30, r20
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	ee 0f       	add	r30, r30
 1c8:	ff 1f       	adc	r31, r31
 1ca:	ec 57       	subi	r30, 0x7C	; 124
 1cc:	ff 4f       	sbci	r31, 0xFF	; 255
 1ce:	25 91       	lpm	r18, Z+
 1d0:	34 91       	lpm	r19, Z
 1d2:	20 c0       	rjmp	.+64     	; 0x214 <usart_set_baudrate_precalculated+0xd8>
 1d4:	01 15       	cp	r16, r1
 1d6:	e2 e1       	ldi	r30, 0x12	; 18
 1d8:	1e 07       	cpc	r17, r30
 1da:	ea e7       	ldi	r30, 0x7A	; 122
 1dc:	2e 07       	cpc	r18, r30
 1de:	31 05       	cpc	r19, r1
 1e0:	49 f4       	brne	.+18     	; 0x1f4 <usart_set_baudrate_precalculated+0xb8>
 1e2:	e4 2f       	mov	r30, r20
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	ee 0f       	add	r30, r30
 1e8:	ff 1f       	adc	r31, r31
 1ea:	ea 58       	subi	r30, 0x8A	; 138
 1ec:	ff 4f       	sbci	r31, 0xFF	; 255
 1ee:	25 91       	lpm	r18, Z+
 1f0:	34 91       	lpm	r19, Z
 1f2:	10 c0       	rjmp	.+32     	; 0x214 <usart_set_baudrate_precalculated+0xd8>
 1f4:	01 15       	cp	r16, r1
 1f6:	14 42       	sbci	r17, 0x24	; 36
 1f8:	24 4f       	sbci	r18, 0xF4	; 244
 1fa:	31 05       	cpc	r19, r1
 1fc:	49 f4       	brne	.+18     	; 0x210 <usart_set_baudrate_precalculated+0xd4>
 1fe:	e4 2f       	mov	r30, r20
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	ee 0f       	add	r30, r30
 204:	ff 1f       	adc	r31, r31
 206:	e8 59       	subi	r30, 0x98	; 152
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	25 91       	lpm	r18, Z+
 20c:	34 91       	lpm	r19, Z
 20e:	02 c0       	rjmp	.+4      	; 0x214 <usart_set_baudrate_precalculated+0xd8>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	4f 3f       	cpi	r20, 0xFF	; 255
 216:	19 f0       	breq	.+6      	; 0x21e <usart_set_baudrate_precalculated+0xe2>
 218:	fc 01       	movw	r30, r24
 21a:	35 83       	std	Z+5, r19	; 0x05
 21c:	24 83       	std	Z+4, r18	; 0x04
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	08 95       	ret

00000224 <usart0_init_9600_8_1_n_16Mh>:
	
	usart->UBRR  = ubrr;
}

//igor
void usart0_init_9600_8_1_n_16Mh(USART_t *usart, const usart_rs232_options_t *opt, uint32_t cpu_hz){
 224:	8f 92       	push	r8
 226:	9f 92       	push	r9
 228:	af 92       	push	r10
 22a:	bf 92       	push	r11
 22c:	ef 92       	push	r14
 22e:	ff 92       	push	r15
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	ec 01       	movw	r28, r24
 23a:	7b 01       	movw	r14, r22
 23c:	49 01       	movw	r8, r18
 23e:	5a 01       	movw	r10, r20
 * \brief usart Pointer to an USART module.
 */
static inline void usart_enable_module_clock(USART_t *usart)
{
#ifdef USART0
	if ((uintptr_t)usart == (uintptr_t)&UCSR0A) {
 240:	80 3c       	cpi	r24, 0xC0	; 192
 242:	91 05       	cpc	r25, r1
 244:	19 f4       	brne	.+6      	; 0x24c <usart0_init_9600_8_1_n_16Mh+0x28>
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm); //0x01
 246:	62 e0       	ldi	r22, 0x02	; 2
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	5b df       	rcall	.-330    	; 0x102 <sysclk_enable_module>
}

//igor
void usart0_init_9600_8_1_n_16Mh(USART_t *usart, const usart_rs232_options_t *opt, uint32_t cpu_hz){
	usart_enable_module_clock(usart);
	usart_format_set(usart, opt->charlength, opt->paritytype, opt->stopbits);
 24c:	f7 01       	movw	r30, r14
 24e:	26 81       	ldd	r18, Z+6	; 0x06
 250:	35 81       	ldd	r19, Z+5	; 0x05
 252:	84 81       	ldd	r24, Z+4	; 0x04
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_CHSIZE01C_gm)) | ((charSize & 0x03) << USART_CHSIZE01C_gp); //ucsr0c&1111 1001|0000 0110
 254:	9a 81       	ldd	r25, Y+2	; 0x02
 256:	48 2f       	mov	r20, r24
 258:	43 70       	andi	r20, 0x03	; 3
 25a:	44 0f       	add	r20, r20
 25c:	99 7f       	andi	r25, 0xF9	; 249
 25e:	94 2b       	or	r25, r20
 260:	9a 83       	std	Y+2, r25	; 0x02
		
	(usart)->UCSRnB = ((usart)->UCSRnB & (~USART_CHSIZE2_bm)) | ((charSize & 0x04) << USART_CHSIZE2_bp); //ucsr0b&1111 1011
 262:	99 81       	ldd	r25, Y+1	; 0x01
 264:	84 70       	andi	r24, 0x04	; 4
 266:	88 0f       	add	r24, r24
 268:	88 0f       	add	r24, r24
 26a:	9b 7f       	andi	r25, 0xFB	; 251
 26c:	89 2b       	or	r24, r25
 26e:	89 83       	std	Y+1, r24	; 0x01

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_PMODE_gm)) | parityMode; //ucsr0c&1100 1111 
 270:	8a 81       	ldd	r24, Y+2	; 0x02
 272:	8f 7c       	andi	r24, 0xCF	; 207
 274:	83 2b       	or	r24, r19
 276:	8a 83       	std	Y+2, r24	; 0x02

	(usart)->UCSRnC = ((usart)->UCSRnC & (~USART_STOPB_bm)) | (twoStopBits << USART_STOPB_bp); //ucsr0c&1111 0111 -1-stop bit
 278:	8a 81       	ldd	r24, Y+2	; 0x02
 27a:	92 2f       	mov	r25, r18
 27c:	99 0f       	add	r25, r25
 27e:	99 0f       	add	r25, r25
 280:	99 0f       	add	r25, r25
 282:	87 7f       	andi	r24, 0xF7	; 247
 284:	89 2b       	or	r24, r25
 286:	8a 83       	std	Y+2, r24	; 0x02
 *
 * \param usart The USART module.
 */
static inline void usart_double_baud_disable(USART_t *usart)
{
	usart->UCSRnA &= ~USART_U2X_bm;
 288:	e0 ec       	ldi	r30, 0xC0	; 192
 28a:	f0 e0       	ldi	r31, 0x00	; 0
 28c:	80 81       	ld	r24, Z
 28e:	8d 7f       	andi	r24, 0xFD	; 253
 290:	80 83       	st	Z, r24
	usart_double_baud_disable(&USART0);
	usart_set_baudrate_precalculated(usart, opt->baudrate, cpu_hz);
 292:	f7 01       	movw	r30, r14
 294:	40 81       	ld	r20, Z
 296:	51 81       	ldd	r21, Z+1	; 0x01
 298:	62 81       	ldd	r22, Z+2	; 0x02
 29a:	73 81       	ldd	r23, Z+3	; 0x03
 29c:	95 01       	movw	r18, r10
 29e:	84 01       	movw	r16, r8
 2a0:	ce 01       	movw	r24, r28
 2a2:	4c df       	rcall	.-360    	; 0x13c <usart_set_baudrate_precalculated>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_TXEN_bm;
 2a4:	89 81       	ldd	r24, Y+1	; 0x01
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	89 83       	std	Y+1, r24	; 0x01
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->UCSRnB |= USART_RXEN_bm;
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	80 61       	ori	r24, 0x10	; 16
 2ae:	89 83       	std	Y+1, r24	; 0x01
	usart_tx_enable(usart);
	usart_rx_enable(usart);
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	bf 90       	pop	r11
 2be:	af 90       	pop	r10
 2c0:	9f 90       	pop	r9
 2c2:	8f 90       	pop	r8
 2c4:	08 95       	ret

000002c6 <_exit>:
 2c6:	f8 94       	cli

000002c8 <__stop_program>:
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <__stop_program>
